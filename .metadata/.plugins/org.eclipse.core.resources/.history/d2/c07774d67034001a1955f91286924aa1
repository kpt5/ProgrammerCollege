package com.internousdev.template.action;

import java.util.Map;

import org.apache.struts2.interceptor.SessionAware;

import com.opensymphony.xwork2.ActionSupport;

//Sessionとは
//ページ間で変数の内容を維持するための仕組みのことです。
//例えば、Aというページの変数の値を、Bというページでも使えるようにするときに使用します。
//クッキーとの違いは、クッキーがクライアント側（パソコン側）に様々な情報を保存させるのに対し、セッションは、サーバー側に様々な情報を保存させておきます。
//sessionをStruts2で利用する場合は、SessionAwareインターフェースを利用します。

//SessionAwareインターフェース
//SessionAwareインターフェースはStruts2で提供されているインターフェースです。
//セッションを利用したいアクションで、SessionAwareインターフェースを実装して使用します。
//実装すると、Mapでセッションオブジェクトにアクセスできます。

//ActionSupportを継承しているのは定数SUCCESSなどを使うためだけ？
public class BuyItemAction extends ActionSupport implements SessionAware {
	private int stock;
	private String pay;
	private Map<String, Object> session;
	private String result;

	public String execute() {
		result = SUCCESS;

		session.put("stock", stock);
		int intStock = Integer.parseInt(session.get("stock").toString());
		int intPrice = Integer.parseInt(session.get("buyItem_price").toString());
		session.put("buyItem_price", intStock * intPrice);
		String payment;

		if(pay.equals("1")) {
			payment = "現金払い";
			session.put("pay", payment);
		} else {
			payment = "クレジットカード";
			session.put("pay", payment);
		}
		return result;
	}

	public void setStock(int stock) {
		this.stock = stock;
	}

	public void setPay(String pay) {
		this.pay = pay;
	}

//	アノテーション：　コンパイラにとっても意味を持つコメント
	@Override
	public void setSession(Map<String, Object> session) {
		this.session = session;
	}

	public int getStock() {
		return stock;
	}

	public String getPay() {
		return pay;
	}

	public Map<String, Object> getSession() {
		return session;
	}
}
